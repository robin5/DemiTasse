// **********************************************************************************
// * Copyright (c) 2013 Robin Murray
// **********************************************************************************
// *
// * File: irParserTokenManager.cs
// *
// * Description: 
// *
// * Author: Robin Murray
// *
// **********************************************************************************
// *
// * Granting License: The MIT License (MIT)
// * 
// *   Permission is hereby granted, free of charge, to any person obtaining a copy
// *   of this software and associated documentation files (the "Software"), to deal
// *   in the Software without restriction, including without limitation the rights
// *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// *   copies of the Software, and to permit persons to whom the Software is
// *   furnished to do so, subject to the following conditions:
// *   The above copyright notice and this permission notice shall be included in
// *   all copies or substantial portions of the Software.
// *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// *   THE SOFTWARE.
// * 
// **********************************************************************************

// **********************************************************************************
// * Using
// **********************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using DemiTasse.ir;
using DemiTasse.psrutil;

// **********************************************************************************
// * Implementation
// **********************************************************************************

namespace DemiTasse.irpsr
{
    /* Generated By:JavaCC: Do not edit this line. irParserTokenManager.java */
    /* package irpsr; */
    /* import ir.*; */

    /** Token Manager. */
    public class irParserTokenManager : irParserConstants
    {
        static private /* final */ int jjStopStringLiteralDfa_0(int pos, long active0)
        {
            switch (pos)
            {
                case 0:
                    if ((active0 & 0x7ffffc0L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        return 5;
                    }
                    return -1;
                case 1:
                    if ((active0 & 0x7ffffc0L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        jjmatchedPos = 1;
                        return 5;
                    }
                    return -1;
                case 2:
                    if ((active0 & 0x6fdffc0L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        jjmatchedPos = 2;
                        return 5;
                    }
                    if ((active0 & 0x1020000L) != 0L)
                    return 5;
                    return -1;
                case 3:
                    if ((active0 & 0x6c4b3c0L) != 0L)
                    {
                        if (jjmatchedPos != 3)
                        {
                            jjmatchedKind = RegExpId.ID;
                            jjmatchedPos = 3;
                        }
                        return 5;
                    }
                    if ((active0 & 0x394c00L) != 0L)
                        return 5;
                    return -1;
                case 4:
                    if ((active0 & 0x400c3c0L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        jjmatchedPos = 4;
                        return 5;
                    }
                    if ((active0 & 0x2c43000L) != 0L)
                        return 5;
                    return -1;
                case 5:
                    if ((active0 & 0x40L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        jjmatchedPos = 5;
                        return 5;
                    }
                    if ((active0 & 0x400c380L) != 0L)
                        return 5;
                    return -1;
                case 6:
                    if ((active0 & 0x40L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        jjmatchedPos = 6;
                        return 5;
                    }
                    return -1;
                case 7:
                    if ((active0 & 0x40L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        jjmatchedPos = 7;
                        return 5;
                    }
                    return -1;
                case 8:
                    if ((active0 & 0x40L) != 0L)
                    {
                        jjmatchedKind = RegExpId.ID;
                        jjmatchedPos = 8;
                        return 5;
                    }
                    return -1;
                default :
                    return -1;
            }
        }
        static private /* final */ int jjStartNfa_0(int pos, long active0)
        {
            return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
        }
        static private int jjStopAtPos(int pos, RegExpId kind)
        {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            return pos + 1;
        }
        static private int jjMoveStringLiteralDfa0_0()
        {
            switch((int)curChar)
            {
                case 33:
                    return jjMoveStringLiteralDfa1_0(0x8000000000L);
                case 38:
                    return jjMoveStringLiteralDfa1_0(0x4000000000000L);
                case 40:
                    return jjStopAtPos(0, RegExpId.kw32);
                case 41:
                    return jjStopAtPos(0, RegExpId.kw35);
                case 42:
                    return jjStopAtPos(0, RegExpId.kw48);
                case 43:
                    return jjStopAtPos(0, RegExpId.kw46);
                case 44:
                    return jjStopAtPos(0, RegExpId.kw34);
                case 45:
                    return jjStopAtPos(0, RegExpId.kw47);
                case 47:
                    return jjStopAtPos(0, RegExpId.kw49);
                case 60:
                    jjmatchedKind = RegExpId.kw40;
                    return jjMoveStringLiteralDfa1_0(0x20000000000L);
                case 61:
                    jjmatchedKind = RegExpId.kw33;
                    return jjMoveStringLiteralDfa1_0(0x4000000000L);
                case 62:
                    jjmatchedKind = RegExpId.kw42;
                    return jjMoveStringLiteralDfa1_0(0x80000000000L);
                case 66:
                    return jjMoveStringLiteralDfa1_0(0x40000L);
                case 67:
                    return jjMoveStringLiteralDfa1_0(0x2085000L);
                case 69:
                    return jjMoveStringLiteralDfa1_0(0x10000L);
                case 70:
                    return jjMoveStringLiteralDfa1_0(0x400000L);
                case 73:
                    return jjMoveStringLiteralDfa1_0(0x40L);
                case 74:
                    return jjMoveStringLiteralDfa1_0(0x800L);
                case 76:
                    return jjMoveStringLiteralDfa1_0(0x2000L);
                case 77:
                    return jjMoveStringLiteralDfa1_0(0x20400L);
                case 78:
                    return jjMoveStringLiteralDfa1_0(0x200000L);
                case 80:
                    return jjMoveStringLiteralDfa1_0(0x800000L);
                case 82:
                    return jjMoveStringLiteralDfa1_0(0x8000L);
                case 83:
                    return jjMoveStringLiteralDfa1_0(0x4000000L);
                case 84:
                    return jjMoveStringLiteralDfa1_0(0x100000L);
                case 86:
                    return jjMoveStringLiteralDfa1_0(0x1000000L);
                case 91:
                    return jjStopAtPos(0, RegExpId.kw44);
                case 93:
                    return jjStopAtPos(0, RegExpId.kw45);
                case 97:
                    return jjMoveStringLiteralDfa1_0(0x200L);
                case 116:
                    return jjMoveStringLiteralDfa1_0(0x100L);
                case 118:
                    return jjMoveStringLiteralDfa1_0(0x80L);
                case 123:
                    return jjStopAtPos(0, RegExpId.kw36);
                case 124:
                    return jjMoveStringLiteralDfa1_0(0x8000000000000L);
                case 125:
                    return jjStopAtPos(0, RegExpId.kw37);
                default :
                    return jjMoveNfa_0(1, 0);
            }
        }
        static private int jjMoveStringLiteralDfa1_0(long active0)
        {
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(0, active0);
                return 1;
            }
            switch((int)curChar)
            {
                case 38:
                    if ((active0 & 0x4000000000000L) != 0L)
                        return jjStopAtPos(1, RegExpId.kw50);
                    break;
                case 61:
                    if ((active0 & 0x4000000000L) != 0L)
                        return jjStopAtPos(1, RegExpId.kw38);
                    else if ((active0 & 0x8000000000L) != 0L)
                        return jjStopAtPos(1, RegExpId.kw39);
                    else if ((active0 & 0x20000000000L) != 0L)
                        return jjStopAtPos(1, RegExpId.kw41);
                    else if ((active0 & 0x80000000000L) != 0L)
                        return jjStopAtPos(1, RegExpId.kw43);
                    break;
                case 65:
                    return jjMoveStringLiteralDfa2_0(active0, 0x1a86000L);
                case 69:
                    return jjMoveStringLiteralDfa2_0(active0, 0x128000L);
                case 73:
                    return jjMoveStringLiteralDfa2_0(active0, 0x440000L);
                case 74:
                    return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
                case 79:
                    return jjMoveStringLiteralDfa2_0(active0, 0x2000400L);
                case 82:
                    return jjMoveStringLiteralDfa2_0(active0, 0x40L);
                case 83:
                    return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
                case 84:
                    return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
                case 85:
                    return jjMoveStringLiteralDfa2_0(active0, 0x800L);
                case 97:
                    return jjMoveStringLiteralDfa2_0(active0, 0x80L);
                case 109:
                    return jjMoveStringLiteralDfa2_0(active0, 0x100L);
                case 114:
                    return jjMoveStringLiteralDfa2_0(active0, 0x200L);
                case 124:
                    if ((active0 & 0x8000000000000L) != 0L)
                        return jjStopAtPos(1, RegExpId.kw51);
                    break;
                default :
                    break;
            }
            return jjStartNfa_0(0, active0);
        }
        static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(0, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(1, active0);
                return 2;
            }
            switch((int) curChar)
            {
                case 66:
                    return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
                case 69:
                    return jjMoveStringLiteralDfa3_0(active0, 0x410000L);
                case 76:
                    return jjMoveStringLiteralDfa3_0(active0, 0x84000L);
                case 77:
                    if ((active0 & 0x20000L) != 0L)
                        return jjStartNfaWithStates_0(2, RegExpId.kwMEM, 5);
                    return jjMoveStringLiteralDfa3_0(active0, 0x300800L);
                case 78:
                    return jjMoveStringLiteralDfa3_0(active0, 0x2040000L);
                case 82:
                    if ((active0 & 0x1000000L) != 0L)
                        return jjStartNfaWithStates_0(2, RegExpId.kwVAR, 5);
                    return jjMoveStringLiteralDfa3_0(active0, 0x4800000L);
                case 84:
                    return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
                case 85:
                    return jjMoveStringLiteralDfa3_0(active0, 0x1000L);
                case 86:
                    return jjMoveStringLiteralDfa3_0(active0, 0x400L);
                case 95:
                    return jjMoveStringLiteralDfa3_0(active0, 0x40L);
                case 103:
                    return jjMoveStringLiteralDfa3_0(active0, 0x200L);
                case 112:
                    return jjMoveStringLiteralDfa3_0(active0, 0x100L);
                case 114:
                    return jjMoveStringLiteralDfa3_0(active0, 0x80L);
                default :
                    break;
            }
            return jjStartNfa_0(1, active0);
        }
        static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(1, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(2, active0);
                return 3;
            }
            switch((int) curChar)
            {
                case 65:
                    return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
                case 67:
                    return jjMoveStringLiteralDfa4_0(active0, 0x380L);
                case 69:
                    if ((active0 & 0x400L) != 0L)
                        return jjStartNfaWithStates_0(3, RegExpId.kwMOVE, 5);
                    else if ((active0 & 0x200000L) != 0L)
                        return jjStartNfaWithStates_0(3, RegExpId.kwNAME, 5);
                    return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
                case 73:
                    return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
                case 76:
                    if ((active0 & 0x80000L) != 0L)
                    {
                        jjmatchedKind = RegExpId.kwCALL;
                    jjmatchedPos = 3;
                    }
                    return jjMoveStringLiteralDfa4_0(active0, 0x404000L);
                case 77:
                    return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
                case 79:
                    return jjMoveStringLiteralDfa4_0(active0, 0x40000L);
                case 80:
                    if ((active0 & 0x800L) != 0L)
                        return jjStartNfaWithStates_0(3, RegExpId.kwJUMP, 5);
                    else if ((active0 & 0x100000L) != 0L)
                        return jjStartNfaWithStates_0(3, RegExpId.kwTEMP, 5);
                    return jjMoveStringLiteralDfa4_0(active0, 0x40L);
                case 81:
                    if ((active0 & 0x10000L) != 0L)
                        return jjStartNfaWithStates_0(3, RegExpId.kwESEQ, 5);
                    break;
                case 83:
                    return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
                case 85:
                    return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
                default :
                    break;
            }
            return jjStartNfa_0(2, active0);
        }
        static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(2, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(3, active0);
                return 4;
            }
            switch((int) curChar)
            {
                case 68:
                    if ((active0 & 0x400000L) != 0L)
                        return jjStartNfaWithStates_0(4, RegExpId.kwFIELD, 5);
                    break;
                case 76:
                    if ((active0 & 0x2000L) != 0L)
                        return jjStartNfaWithStates_0(4, RegExpId.kwLABEL, 5);
                    break;
                case 77:
                    if ((active0 & 0x800000L) != 0L)
                        return jjStartNfaWithStates_0(4, RegExpId.kwPARAM, 5);
                    break;
                case 78:
                    return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
                case 80:
                    if ((active0 & 0x1000L) != 0L)
                        return jjStartNfaWithStates_0(4, RegExpId.kwCJUMP, 5);
                    else if ((active0 & 0x40000L) != 0L)
                        return jjStartNfaWithStates_0(4, RegExpId.kwBINOP, 5);
                    break;
                case 82:
                    return jjMoveStringLiteralDfa5_0(active0, 0x8040L);
                case 83:
                    return jjMoveStringLiteralDfa5_0(active0, 0x4000L);
                case 84:
                    if ((active0 & 0x2000000L) != 0L)
                        return jjStartNfaWithStates_0(4, RegExpId.kwCONST, 5);
                    break;
                case 110:
                    return jjMoveStringLiteralDfa5_0(active0, 0x380L);
                default :
                    break;
            }
            return jjStartNfa_0(3, active0);
        }
        static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(3, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(4, active0);
                return 5;
            }
            switch((int) curChar)
            {
                case 71:
                    if ((active0 & 0x4000000L) != 0L)
                        return jjStartNfaWithStates_0(5, RegExpId.kwSTRING, 5);
                    break;
                case 78:
                    if ((active0 & 0x8000L) != 0L)
                        return jjStartNfaWithStates_0(5, RegExpId.kwRETURN, 5);
                    break;
                case 79:
                    return jjMoveStringLiteralDfa6_0(active0, 0x40L);
                case 84:
                    if ((active0 & 0x4000L) != 0L)
                        return jjStartNfaWithStates_0(5, RegExpId.kwCALLST, 5);
                    break;
                case 116:
                    if ((active0 & 0x80L) != 0L)
                        return jjStartNfaWithStates_0(5, RegExpId.kwVARCNT, 5);
                    else if ((active0 & 0x100L) != 0L)
                        return jjStartNfaWithStates_0(5, RegExpId.kwTMPCNT, 5);
                    else if ((active0 & 0x200L) != 0L)
                        return jjStartNfaWithStates_0(5, RegExpId.kwARGCNT, 5);
                    break;
                default :
                    break;
            }
            return jjStartNfa_0(4, active0);
        }
        static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(4, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(5, active0);
                return 6;
            }
            switch((int) curChar)
            {
                case 71:
                    return jjMoveStringLiteralDfa7_0(active0, 0x40L);
                default :
                    break;
            }
            return jjStartNfa_0(5, active0);
        }
        static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(5, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(6, active0);
                return 7;
            }
            switch((int) curChar)
            {
                case 82:
                    return jjMoveStringLiteralDfa8_0(active0, 0x40L);
                default :
                    break;
            }
            return jjStartNfa_0(6, active0);
        }
        static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(6, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(7, active0);
                return 8;
            }
            switch((int) curChar)
            {
                case 65:
                    return jjMoveStringLiteralDfa9_0(active0, 0x40L);
                default :
                    break;
            }
            return jjStartNfa_0(7, active0);
        }
        static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(7, old0);
            try { curChar = input_stream.readChar(); }
            catch(IOException e) {
                jjStopStringLiteralDfa_0(8, active0);
                return 9;
            }
            switch((int) curChar)
            {
                case 77:
                    if ((active0 & 0x40L) != 0L)
                        return jjStartNfaWithStates_0(9, RegExpId.kwPROG, 5);
                    break;
                default :
                    break;
            }
            return jjStartNfa_0(8, active0);
        }
        static private int jjStartNfaWithStates_0(int pos, RegExpId kind, int state)
        {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            try { curChar = input_stream.readChar(); }
            catch(IOException e) { return pos + 1; }
            return jjMoveNfa_0(state, pos + 1);
        }
        static readonly long[] jjbitVec0 = {
            0x0L, 0x0L, unchecked ((long) 0xffffffffffffffffL), unchecked((long)0xffffffffffffffffL)
        };
        static private int jjMoveNfa_0(int startState, int curPos)
        {
            int startsAt = 0;
            jjnewStateCnt = 6;
            int i = 1;
            jjstateSet[0] = startState;
            RegExpId kind = unchecked((RegExpId) 0x7fffffff);
            for (;;)
            {
                if (++jjround == 0x7fffffff)
                    ReInitRounds();
                if (curChar < 64)
                {
                    long l = 1L << curChar;
                    do
                    {
                    switch(jjstateSet[--i])
                    {
                        case 1:
                            if ((0x3ff000000000000L & l) != 0L)
                            {
                                if (kind > RegExpId.INTVAL)
                                    kind = RegExpId.INTVAL;
                                jjCheckNAdd(0);
                            }
                            else if (curChar == 34)
                                jjCheckNAdd(2);
                            break;
                        case 0:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > RegExpId.INTVAL)
                                kind = RegExpId.INTVAL;
                            jjCheckNAdd(0);
                            break;
                        case 2:
                            if ((unchecked((long)0xfffffffbfffffbffL) & l) != 0L)
                                jjCheckNAddTwoStates(2, 3);
                            break;
                        case 3:
                            if (curChar == 34 && kind > RegExpId.STRVAL)
                                kind = RegExpId.STRVAL;
                            break;
                        case 5:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > RegExpId.ID)
                                kind = RegExpId.ID;
                            jjstateSet[jjnewStateCnt++] = 5;
                            break;
                        default : break;
                    }
                    } while(i != startsAt);
                }
                else if (curChar < 128)
                {
                    long l = 1L << (curChar & /* 077*/ 0x3F);
                    do
                    {
                    switch(jjstateSet[--i])
                    {
                        case 1:
                            if ((0x7fffffe07fffffeL & l) == 0L)
                                break;
                            if (kind > RegExpId.ID)
                                kind = RegExpId.ID;
                            jjCheckNAdd(5);
                            break;
                        case 2:
                            jjAddStates(0, 1);
                            break;
                        case 5:
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (kind > RegExpId.ID)
                                kind = RegExpId.ID;
                            jjCheckNAdd(5);
                            break;
                        default : break;
                    }
                    } while(i != startsAt);
                }
                else
                {
                    int i2 = (curChar & 0xff) >> 6;
                    long l2 = 1L << (curChar & /* 077*/ 0x3F);
                    do
                    {
                    switch(jjstateSet[--i])
                    {
                        case 2:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(0, 1);
                            break;
                        default : break;
                    }
                    } while(i != startsAt);
                }
                if (kind != unchecked((RegExpId)0x7fffffff))
                {
                    jjmatchedKind = kind;
                    jjmatchedPos = curPos;
                    kind = unchecked((RegExpId)0x7fffffff);
                }
                ++curPos;
                if ((i = jjnewStateCnt) == (startsAt = 6 - (jjnewStateCnt = startsAt)))
                    return curPos;
                try 
                { 
                    curChar = input_stream.readChar(); 
                }
                catch(IOException e) { return curPos; }
            }
        }
        static readonly int[] jjnextStates = {
            2, 3, 
        };

    /** Token literal values. */
    public static readonly String[] jjstrLiteralImages = {
#if false

#region in_octal
        "", 
        null, 
        null, 
        null, 
        null, 
        null, 
        "\111\122\137\120\122\117\107\122\101\115", 
        "\166\141\162\103\156\164", 
        "\164\155\160\103\156\164", 
        "\141\162\147\103\156\164", 
        "\115\117\126\105", 
        "\112\125\115\120", 
        "\103\112\125\115\120", 
        "\114\101\102\105\114", 
        "\103\101\114\114\123\124", 
        "\122\105\124\125\122\116", 
        "\105\123\105\121", 
        "\115\105\115", 
        "\102\111\116\117\120", 
        "\103\101\114\114", 
        "\124\105\115\120", 
        "\116\101\115\105", 
        "\106\111\105\114\104", 
        "\120\101\122\101\115", 
        "\126\101\122", 
        "\103\117\116\123\124", 
        "\123\124\122\111\116\107", 
        null, 
        null, 
        null, 
        null, 
        null, 
        "\50", "\75", "\54", "\51", "\173", "\175", "\75\75", "\41\75", 
        "\74", "\74\75", "\76", "\76\75", "\133", "\135", "\53", "\55", "\52", "\57", 
        "\46\46", "\174\174", };
#endregion  in_octal
#else
#region in_unicode
        "",
        null,
        null,
        null,
        null,
        null,
        "\u0049\u0052\u005F\u0050\u0052\u004F\u0047\u0052\u0041\u004D",
        "\u0076\u0061\u0072\u0043\u006E\u0074",
        "\u0074\u006D\u0070\u0043\u006E\u0074",
        "\u0061\u0072\u0067\u0043\u006E\u0074",
        "\u004D\u004F\u0056\u0045",
        "\u004A\u0055\u004D\u0050",
        "\u0043\u004A\u0055\u004D\u0050",
        "\u004C\u0041\u0042\u0045\u004C",
        "\u0043\u0041\u004C\u004C\u0053\u0054",
        "\u0052\u0045\u0054\u0055\u0052\u004E",
        "\u0045\u0053\u0045\u0051",
        "\u004D\u0045\u004D",
        "\u0042\u0049\u004E\u004F\u0050",
        "\u0043\u0041\u004C\u004C",
        "\u0054\u0045\u004D\u0050",
        "\u004E\u0041\u004D\u0045",
        "\u0046\u0049\u0045\u004C\u0044",
        "\u0050\u0041\u0052\u0041\u004D",
        "\u0056\u0041\u0052",
        "\u0043\u004F\u004E\u0053\u0054",
        "\u0053\u0054\u0052\u0049\u004E\u0047",
        null,
        null,
        null,
        null,
        null,
        "\u0028",
        "\u003D",
        "\u002C",
        "\u0029",
        "\u007B",
        "\u007D",
        "\u003D\u003D",
        "\u0021\u003D",
        "\u003C",
        "\u003C\u003D",
        "\u003E",
        "\u003E\u003D",
        "\u005B",
        "\u005D",
        "\u002B",
        "\u002D",
        "\u002A",
        "\u002F",
        "\u0026\u0026",
        "\u007C\u007C"};
#endregion in_unicode
#endif

        /** Lexer state names. */
        public static readonly String[] lexStateNames = {
            "DEFAULT",
        };

        static readonly long[] jjtoToken = {
            0xfffffe7ffffc1L, 
        };
        
        static readonly long[] jjtoSkip = {
            0x3eL, 
        };

        static public SimpleCharStream input_stream;
        static private readonly int[] jjrounds = new int[6];
        static private readonly int[] jjstateSet = new int[12];
        private static readonly StringBuilder jjimage = new StringBuilder();
        private static StringBuilder image = jjimage;
        private static int jjimageLen;
        private static int lengthOfMatch;
        static protected char curChar;

        /** Constructor. */
        public irParserTokenManager(SimpleCharStream stream){
            if (input_stream != null)
                throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
            input_stream = stream;
        }

        /** Constructor. */
        public irParserTokenManager(SimpleCharStream stream, int lexState)
            :this(stream)
        {
            // this(stream);
            SwitchTo(lexState);
        }

        /** Reinitialise parser. */
        static public void ReInit(SimpleCharStream stream)
        {
            jjmatchedPos = jjnewStateCnt = 0;
            curLexState = defaultLexState;
            input_stream = stream;
            ReInitRounds();
        }

        static private void ReInitRounds()
        {
            int i;
            jjround = unchecked((int) 0x80000001);
            for (i = 6; i-- > 0;)
                jjrounds[i] = unchecked((int) 0x80000000);
        }

        /** Reinitialise parser. */
        static public void ReInit(SimpleCharStream stream, int lexState)
        {
            ReInit(stream);
            SwitchTo(lexState);
        }

        /** Switch to specified lex state. */
        static public void SwitchTo(int lexState)
        {
            if (lexState >= 1 || lexState < 0)
                throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
            else
                curLexState = lexState;
        }

        static protected IrToken jjFillToken()
        {
            /* final */ IrToken t;
            /* final */ string curTokenImage;
            /* final */ int beginLine;
            /* final */ int endLine;
            /* final */ int beginColumn;
            /* final */ int endColumn;

            /* throws Exception */
            string im = jjstrLiteralImages[(int)jjmatchedKind];
            curTokenImage = (im == null) ? input_stream.GetImage() : im;
            beginLine = input_stream.getBeginLine();
            beginColumn = input_stream.getBeginColumn();
            endLine = input_stream.getEndLine();
            endColumn = input_stream.getEndColumn();
            t = IrToken.newToken(jjmatchedKind, curTokenImage);

            t.beginLine = beginLine;
            t.endLine = endLine;
            t.beginColumn = beginColumn;
            t.endColumn = endColumn;

            return t;
        }

        static int curLexState = 0;
        static int defaultLexState = 0;
        static int jjnewStateCnt;
        static int jjround;
        static int jjmatchedPos;
        static RegExpId jjmatchedKind;

        /** Get the next Token. */
        public static IrToken getNextToken() 
        {
            IrToken matchedToken;
            int curPos = 0;
            int dummy = 0;
            bool continue_loop = false;

            //EOFLoop :
            for (;;)
            {
                try
                {
                    curChar = input_stream.BeginToken();
                }
                catch(IOException e)
                {
                    jjmatchedKind = 0;
                    matchedToken = jjFillToken();
                    return matchedToken;
                }

                image = jjimage;
                //image.setLength(0);
                image.Length = 0;
                jjimageLen = 0;

                try 
                {
                    continue_loop = false;
                    input_stream.backup(0);
                    while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
                }
                catch (IOException e1) 
                {
                    continue;
                    //continue_loop = true;
                }

                if (continue_loop)
                    goto EOFLoop_a; // continue EOFLoop;
            
                jjmatchedKind = unchecked((RegExpId)0x7fffffff);
                jjmatchedPos = 0;
                curPos = jjMoveStringLiteralDfa0_0();

                if (jjmatchedKind != unchecked((RegExpId)0x7fffffff))
                {
                    if (jjmatchedPos + 1 < curPos)
                        input_stream.backup(curPos - jjmatchedPos - 1);

                    if ((jjtoToken[(int)jjmatchedKind >> 6] & (1L << ((int)jjmatchedKind & 0x3F))) != 0L)
                    {
                        matchedToken = jjFillToken();
                        TokenLexicalActions(matchedToken);
                        return matchedToken;
                    }
                    else
                    {
                        goto EOFLoop_a; // continue EOFLoop;
                    }
                }

                int error_line = input_stream.getEndLine();
                int error_column = input_stream.getEndColumn();
            
                String error_after = null;
                bool EOFSeen = false;
            
                try
                { 
                    input_stream.readChar(); 
                    input_stream.backup(1); 
                }
                catch (IOException e1) 
                {
                    EOFSeen = true;
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                    if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                }
                else
                    error_column++;
                }
                if (!EOFSeen) 
                {
                    input_stream.backup(1);
                    error_after = curPos <= 1 ? "" : input_stream.GetImage();
                }
                throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);

            EOFLoop_a:
                dummy++; dummy--;
            }
        }

        static void TokenLexicalActions(IrToken matchedToken)
        {
            switch(jjmatchedKind)
            {
                case RegExpId.INTVAL :

                    image.Append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    try
                    {
                        int.Parse(matchedToken.image);
                    }
                    catch (Exception e)
                    {
                        throw new TokenMgrError("Lexical error at line "
                        + matchedToken.beginLine + ", column " + matchedToken.beginColumn +
                        ".  Integer value over 2^31-1", 0);
                    }
                    break;

                case RegExpId.STRVAL:

                    image.Append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    if (matchedToken.image.Length > 257)
                        throw new TokenMgrError("Lexical error at line "
                        + matchedToken.beginLine + ", column " + matchedToken.beginColumn +
                        ".  String length over 255", 0);
                    break;

                case RegExpId.ID:
                    
                    image.Append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    if (matchedToken.image.Length > 255)
                        throw new TokenMgrError("Lexical error at line "
                        + matchedToken.beginLine + ", column " + matchedToken.beginColumn +
                        ".  Id length over 255", 0);
                    break;

                default :

                    break;
            }
        }

        static private void jjCheckNAdd(int state)
        {
            if (jjrounds[state] != jjround)
            {
                jjstateSet[jjnewStateCnt++] = state;
                jjrounds[state] = jjround;
            }
        }

        static private void jjAddStates(int start, int end)
        {
            do
            {
                jjstateSet[jjnewStateCnt++] = jjnextStates[start];
            } while (start++ != end);
        }

        static private void jjCheckNAddTwoStates(int state1, int state2)
        {
            jjCheckNAdd(state1);
            jjCheckNAdd(state2);
        }

    }
}
