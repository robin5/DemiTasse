// **********************************************************************************
// * Copyright (c) 2013 Robin Murray
// **********************************************************************************
// *
// * File: MiniParserTokenManager.cs
// *
// * Description: 
// *
// * Generated By: JavaCC: miniParserTokenManager.java
// *
// * Author: Robin Murray
// *
// **********************************************************************************
// *
// * Granting License: The MIT License (MIT)
// * 
// *   Permission is hereby granted, free of charge, to any person obtaining a copy
// *   of this software and associated documentation files (the "Software"), to deal
// *   in the Software without restriction, including without limitation the rights
// *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// *   copies of the Software, and to permit persons to whom the Software is
// *   furnished to do so, subject to the following conditions:
// *   The above copyright notice and this permission notice shall be included in
// *   all copies or substantial portions of the Software.
// *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// *   THE SOFTWARE.
// * 
// **********************************************************************************

// **********************************************************************************
// * Using
// **********************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

using DemiTasse.ast;
using DemiTasse.psrutil;

// **********************************************************************************
// * Implementation
// **********************************************************************************

namespace DemiTasse.minipsr
{
    /** Token Manager. */
    public class miniParserTokenManager : miniParserConstants
    {
        /** Debug output. */
        // public static  java.io.PrintStream debugStream = System.out;
        //public static System.IO.TextWriter debugStream = Console.Out;

        /** Set debug output. */
        //public static  void setDebugStream(Stream ds) { debugStream = ds; }

        private static /* final */ int jjStopStringLiteralDfa_0(int pos, long active0)
        {
            switch (pos)
            {
            case 0:
                if ((active0 & 0x1ffffc0L) != 0L)
                {
                    jjmatchedKind = 25;
                return 8;
                }
                if ((active0 & 0x10000000004L) != 0L)
                return 1;
                return -1;
            case 1:
                if ((active0 & 0x1fff7c0L) != 0L)
                {
                jjmatchedKind = 25;
                jjmatchedPos = 1;
                return 8;
                }
                if ((active0 & 0x800L) != 0L)
                return 8;
                return -1;
            case 2:
                if ((active0 & 0x1ff67c0L) != 0L)
                {
                jjmatchedKind = 25;
                jjmatchedPos = 2;
                return 8;
                }
                if ((active0 & 0x9000L) != 0L)
                return 8;
                return -1;
            case 3:
                if ((active0 & 0x11f26c0L) != 0L)
                {
                jjmatchedKind = 25;
                jjmatchedPos = 3;
                return 8;
                }
                if ((active0 & 0xe04100L) != 0L)
                return 8;
                return -1;
            case 4:
                if ((active0 & 0x1000480L) != 0L)
                return 8;
                if ((active0 & 0x1f2240L) != 0L)
                {
                jjmatchedKind = 25;
                jjmatchedPos = 4;
                return 8;
                }
                return -1;
            case 5:
                if ((active0 & 0xf2000L) != 0L)
                return 8;
                if ((active0 & 0x100240L) != 0L)
                {
                jjmatchedKind = 25;
                jjmatchedPos = 5;
                return 8;
                }
                return -1;
            case 6:
                if ((active0 & 0x240L) != 0L)
                return 8;
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 7:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 8:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 9:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 10:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 11:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 12:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 13:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 14:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 15:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            case 16:
                if ((active0 & 0x100000L) != 0L)
                {
                if (jjmatchedPos < 5)
                {
                    jjmatchedKind = 25;
                    jjmatchedPos = 5;
                }
                return -1;
                }
                return -1;
            default :
                return -1;
            }
        }

        private static /* final */ int jjStartNfa_0(int pos, long active0)
        {
            return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
        }

        static private int jjStopAtPos(int pos, int kind)
        {
            jjmatchedKind = kind;
            jjmatchedPos = pos;
            return pos + 1;
        }

        static private int jjMoveStringLiteralDfa0_0()
        {
            switch((int)curChar)
            {
                case 33:
                    jjmatchedKind = 42;
                    return jjMoveStringLiteralDfa1_0(0x100000000000L);
                case 38:
                    return jjMoveStringLiteralDfa1_0(0x1000000000L);
                case 40:
                    return jjStopAtPos(0, 26);
                case 41:
                    return jjStopAtPos(0, 27);
                case 42:
                    return jjStopAtPos(0, 39);
                case 43:
                    return jjStopAtPos(0, 37);
                case 44:
                    return jjStopAtPos(0, 32);
                case 45:
                    return jjStopAtPos(0, 38);
                case 46:
                    return jjStopAtPos(0, 41);
                case 47:
                    jjmatchedKind = 40;
                    return jjMoveStringLiteralDfa1_0(0x4L);
                case 59:
                    return jjStopAtPos(0, 34);
                case 60:
                    jjmatchedKind = 45;
                    return jjMoveStringLiteralDfa1_0(0x400000000000L);
                case 61:
                    jjmatchedKind = 33;
                    return jjMoveStringLiteralDfa1_0(0x80000000000L);
                case 62:
                    jjmatchedKind = 47;
                    return jjMoveStringLiteralDfa1_0(0x1000000000000L);
                case 83:
                    return jjMoveStringLiteralDfa1_0(0x180000L);
                case 91:
                    return jjStopAtPos(0, 28);
                case 93:
                    return jjStopAtPos(0, 29);
                case 98:
                    return jjMoveStringLiteralDfa1_0(0x40L);
                case 99:
                    return jjMoveStringLiteralDfa1_0(0x80L);
                case 101:
                    return jjMoveStringLiteralDfa1_0(0x300L);
                case 102:
                    return jjMoveStringLiteralDfa1_0(0x400L);
                case 105:
                    return jjMoveStringLiteralDfa1_0(0x1800L);
                case 108:
                    return jjMoveStringLiteralDfa1_0(0x2000L);
                case 109:
                    return jjMoveStringLiteralDfa1_0(0x4000L);
                case 110:
                    return jjMoveStringLiteralDfa1_0(0x8000L);
                case 112:
                    return jjMoveStringLiteralDfa1_0(0x10000L);
                case 114:
                    return jjMoveStringLiteralDfa1_0(0x20000L);
                case 115:
                    return jjMoveStringLiteralDfa1_0(0x40000L);
                case 116:
                    return jjMoveStringLiteralDfa1_0(0x600000L);
                case 118:
                    return jjMoveStringLiteralDfa1_0(0x800000L);
                case 119:
                    return jjMoveStringLiteralDfa1_0(0x1000000L);
                case 123:
                    return jjStopAtPos(0, 30);
                case 124:
                    return jjMoveStringLiteralDfa1_0(0x800000000L);
                case 125:
                    return jjStopAtPos(0, 31);
                default :
                    return jjMoveNfa_0(0, 0);
            }
        }

        static private int jjMoveStringLiteralDfa1_0(long active0)
        {
            try
            { 
                curChar = SimpleCharStream.readChar(); 
            }
            catch(IOException e)
            {
                jjStopStringLiteralDfa_0(0, active0);
                return 1;
            }

            switch((int)curChar)
            {
                case 38:
                    if ((active0 & 0x1000000000L) != 0L)
                    return jjStopAtPos(1, 36);
                    break;
                case 42:
                    if ((active0 & 0x4L) != 0L)
                    return jjStopAtPos(1, 2);
                    break;
                case 61:
                    if ((active0 & 0x80000000000L) != 0L)
                        return jjStopAtPos(1, 43);
                    else if ((active0 & 0x100000000000L) != 0L)
                        return jjStopAtPos(1, 44);
                    else if ((active0 & 0x400000000000L) != 0L)
                        return jjStopAtPos(1, 46);
                    else if ((active0 & 0x1000000000000L) != 0L)
                        return jjStopAtPos(1, 48);
                    break;
                case 97:
                    return jjMoveStringLiteralDfa2_0(active0, 0x4400L);
                case 101:
                    return jjMoveStringLiteralDfa2_0(active0, 0x2a000L);
                case 102:
                    if ((active0 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(1, 11, 8);
                    break;
                case 104:
                    return jjMoveStringLiteralDfa2_0(active0, 0x1200000L);
                case 108:
                    return jjMoveStringLiteralDfa2_0(active0, 0x180L);
                case 110:
                    return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
                case 111:
                    return jjMoveStringLiteralDfa2_0(active0, 0x800040L);
                case 114:
                    return jjMoveStringLiteralDfa2_0(active0, 0x400000L);
                case 116:
                    return jjMoveStringLiteralDfa2_0(active0, 0xc0000L);
                case 117:
                    return jjMoveStringLiteralDfa2_0(active0, 0x10000L);
                case 120:
                    return jjMoveStringLiteralDfa2_0(active0, 0x200L);
                case 121:
                    return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
                case 124:
                    if ((active0 & 0x800000000L) != 0L)
                    return jjStopAtPos(1, 35);
                    break;
                default :
                    break;
                }
            return jjStartNfa_0(0, active0);
        }

        static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(0, old0);
            try
            { 
                curChar = SimpleCharStream.readChar();
            }
            catch(IOException e)
            {
                jjStopStringLiteralDfa_0(1, active0);
                return 2;
            }

            switch((int)curChar)
            {
                case 97:
                    return jjMoveStringLiteralDfa3_0(active0, 0x40080L);
                case 98:
                    return jjMoveStringLiteralDfa3_0(active0, 0x10000L);
                case 105:
                    return jjMoveStringLiteralDfa3_0(active0, 0x1a04000L);
                case 108:
                    return jjMoveStringLiteralDfa3_0(active0, 0x400L);
                case 110:
                    return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
                case 111:
                    return jjMoveStringLiteralDfa3_0(active0, 0x40L);
                case 114:
                    return jjMoveStringLiteralDfa3_0(active0, 0x80000L);
                case 115:
                    return jjMoveStringLiteralDfa3_0(active0, 0x100100L);
                case 116:
                    if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_0(2, 12, 8);
                    return jjMoveStringLiteralDfa3_0(active0, 0x20200L);
                case 117:
                    return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
                case 119:
                    if ((active0 & 0x8000L) != 0L)
                    return jjStartNfaWithStates_0(2, 15, 8);
                    break;
                default :
                    break;
            }
            return jjStartNfa_0(1, active0);
        }

        static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(1, old0);
            try
            { 
                curChar = SimpleCharStream.readChar(); 
            }
            catch(IOException e)
            {
                jjStopStringLiteralDfa_0(2, active0);
                return 3;
            }

            switch((int)curChar)
            {
                case 100:
                    if ((active0 & 0x800000L) != 0L)
                    return jjStartNfaWithStates_0(3, 23, 8);
                    break;
                case 101:
                    if ((active0 & 0x100L) != 0L)
                    return jjStartNfaWithStates_0(3, 8, 8);
                    else if ((active0 & 0x400000L) != 0L)
                    return jjStartNfaWithStates_0(3, 22, 8);
                    return jjMoveStringLiteralDfa4_0(active0, 0x200L);
                case 103:
                    return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
                case 105:
                    return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
                case 108:
                    return jjMoveStringLiteralDfa4_0(active0, 0x1010040L);
                case 110:
                    if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(3, 14, 8);
                    break;
                case 115:
                    if ((active0 & 0x200000L) != 0L)
                    return jjStartNfaWithStates_0(3, 21, 8);
                    return jjMoveStringLiteralDfa4_0(active0, 0x480L);
                case 116:
                    return jjMoveStringLiteralDfa4_0(active0, 0x140000L);
                case 117:
                    return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
                default :
                    break;
            }
            return jjStartNfa_0(2, active0);
        }

        static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
        {
            if (((active0 &= old0)) == 0L)
                return jjStartNfa_0(2, old0);
            try 
            { 
                curChar = SimpleCharStream.readChar(); 
            }
            catch(IOException e)
            {
                jjStopStringLiteralDfa_0(3, active0);
                return 4;
            }

            switch((int)curChar)
            {
                case 101:
                    if ((active0 & 0x400L) != 0L)
                    return jjStartNfaWithStates_0(4, 10, 8);
                    else if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_0(4, 24, 8);
                    return jjMoveStringLiteralDfa5_0(active0, 0x100040L);
                case 105:
                    return jjMoveStringLiteralDfa5_0(active0, 0x50000L);
                case 110:
                    return jjMoveStringLiteralDfa5_0(active0, 0x80200L);
                case 114:
                    return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
                case 115:
                    if ((active0 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(4, 7, 8);
                    break;
                case 116:
                    return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
                default :
                    break;
            }
            return jjStartNfa_0(3, active0);
        }

        static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(3, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(4, active0);
              return 5;
           }
           switch((int)curChar)
           {
              case 97:
                 return jjMoveStringLiteralDfa6_0(active0, 0x40L);
              case 99:
                 if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(5, 16, 8);
                 else if ((active0 & 0x40000L) != 0L)
                    return jjStartNfaWithStates_0(5, 18, 8);
                 break;
              case 100:
                 return jjMoveStringLiteralDfa6_0(active0, 0x200L);
              case 103:
                 if ((active0 & 0x80000L) != 0L)
                    return jjStartNfaWithStates_0(5, 19, 8);
                 break;
              case 104:
                 if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_0(5, 13, 8);
                 break;
              case 109:
                 return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
              case 110:
                 if ((active0 & 0x20000L) != 0L)
                    return jjStartNfaWithStates_0(5, 17, 8);
                 break;
              default :
                 break;
           }
           return jjStartNfa_0(4, active0);
        }
        
        static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(4, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(5, active0);
              return 6;
           }
           switch((int)curChar)
           {
              case 46:
                 return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
              case 110:
                 if ((active0 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(6, 6, 8);
                 break;
              case 115:
                 if ((active0 & 0x200L) != 0L)
                    return jjStartNfaWithStates_0(6, 9, 8);
                 break;
              default :
                 break;
           }
           return jjStartNfa_0(5, active0);
        }
        static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(5, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(6, active0);
              return 7;
           }
           switch((int)curChar)
           {
              case 111:
                 return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(6, active0);
        }
        static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(6, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(7, active0);
              return 8;
           }
           switch((int)curChar)
           {
              case 117:
                 return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(7, active0);
        }
        static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(7, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(8, active0);
              return 9;
           }
           switch((int)curChar)
           {
              case 116:
                 return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(8, active0);
        }
        static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(8, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(9, active0);
              return 10;
           }
           switch((int)curChar)
           {
              case 46:
                 return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(9, active0);
        }
        static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(9, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(10, active0);
              return 11;
           }
           switch((int)curChar)
           {
              case 112:
                 return jjMoveStringLiteralDfa12_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(10, active0);
        }
        static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(10, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(11, active0);
              return 12;
           }
           switch((int)curChar)
           {
              case 114:
                 return jjMoveStringLiteralDfa13_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(11, active0);
        }
        static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(11, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(12, active0);
              return 13;
           }
           switch((int)curChar)
           {
              case 105:
                 return jjMoveStringLiteralDfa14_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(12, active0);
        }
        static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(12, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(13, active0);
              return 14;
           }
           switch((int)curChar)
           {
              case 110:
                 return jjMoveStringLiteralDfa15_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(13, active0);
        }
        static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(13, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(14, active0);
              return 15;
           }
           switch((int)curChar)
           {
              case 116:
                 return jjMoveStringLiteralDfa16_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(14, active0);
        }
        static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(14, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(15, active0);
              return 16;
           }
           switch((int)curChar)
           {
              case 108:
                 return jjMoveStringLiteralDfa17_0(active0, 0x100000L);
              default :
                 break;
           }
           return jjStartNfa_0(15, active0);
        }
        static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
        {
           if (((active0 &= old0)) == 0L)
              return jjStartNfa_0(15, old0);
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              jjStopStringLiteralDfa_0(16, active0);
              return 17;
           }
           switch((int)curChar)
           {
              case 110:
                 if ((active0 & 0x100000L) != 0L)
                    return jjStopAtPos(17, 20);
                 break;
              default :
                 break;
           }
           return jjStartNfa_0(16, active0);
        }
        static private int jjStartNfaWithStates_0(int pos, int kind, int state)
        {
            jjmatchedKind = kind;
           jjmatchedPos = pos;
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) { return pos + 1; }
           return jjMoveNfa_0(state, pos + 1);
        }
        
        static readonly long[] jjbitVec0 = {
           0x0L, 0x0L, unchecked((long)0xffffffffffffffffL), unchecked((long)0xffffffffffffffffL)
        };

        static private int jjMoveNfa_0(int startState, int curPos)
        {
           int startsAt = 0;
           jjnewStateCnt = 15;
           int i = 1;
           jjstateSet[0] = startState;
           int kind = 0x7fffffff;
           for (;;)
           {
              if (++jjround == 0x7fffffff)
                 ReInitRounds();
              if (curChar < 64)
              {
                 long l = 1L << curChar;
                 do
                 {
                    switch(jjstateSet[--i])
                    {
                       case 0:
                          if ((0x3ff000000000000L & l) != 0L)
                          {
                             if (kind > 51)
                                kind = 51;
                             jjCheckNAdd(9);
                          }
                          else if ((0x100002600L & l) != 0L)
                          {
                             if (kind > 1)
                                kind = 1;
                          }
                          else if (curChar == 34)
                             jjCheckNAddStates(0, 2);
                          else if (curChar == 47)
                             jjstateSet[jjnewStateCnt++] = 1;
                          break;
                       case 1:
                          if (curChar != 47)
                             break;
                          if (kind > 3)
                             kind = 3;
                          jjCheckNAddStates(3, 5);
                          break;
                       case 2:
                          if ((unchecked((long)0xffffffffffffdbffL) & l) == 0L)
                             break;
                          if (kind > 3)
                             kind = 3;
                          jjCheckNAddStates(3, 5);
                          break;
                       case 3:
                          if ((0x2400L & l) != 0L && kind > 3)
                             kind = 3;
                          break;
                       case 4:
                          if (curChar == 10 && kind > 3)
                             kind = 3;
                          break;
                       case 5:
                          if (curChar == 13)
                             jjstateSet[jjnewStateCnt++] = 4;
                          break;
                       case 6:
                          if (curChar == 47)
                             jjstateSet[jjnewStateCnt++] = 1;
                          break;
                       case 8:
                          if ((0x3ff000000000000L & l) == 0L)
                             break;
                          if (kind > 25)
                             kind = 25;
                          jjstateSet[jjnewStateCnt++] = 8;
                          break;
                       case 9:
                          if ((0x3ff000000000000L & l) == 0L)
                             break;
                          if (kind > 51)
                             kind = 51;
                          jjCheckNAdd(9);
                          break;
                       case 10:
                          if (curChar == 34)
                             jjCheckNAddStates(0, 2);
                          break;
                       case 11:
                          if ((unchecked((long)0xfffffffbffffdbffL) & l) != 0L)
                             jjCheckNAddStates(0, 2);
                          break;
                       case 13:
                          if ((0x8400000000L & l) != 0L)
                             jjCheckNAddStates(0, 2);
                          break;
                       case 14:
                          if (curChar == 34 && kind > 52)
                             kind = 52;
                          break;
                       default : break;
                    }
                 } while(i != startsAt);
              }
              else if (curChar < 128)
              {
                 long l = 1L << (curChar & /* 077*/ 0x3F);
                 do
                 {
                    switch(jjstateSet[--i])
                    {
                       case 0:
                       case 8:
                          if ((0x7fffffe07fffffeL & l) == 0L)
                             break;
                          if (kind > 25)
                             kind = 25;
                          jjCheckNAdd(8);
                          break;
                       case 2:
                          if (kind > 3)
                             kind = 3;
                          jjAddStates(3, 5);
                          break;
                       case 11:
                          if ((unchecked((long)0xffffffffefffffffL) & l) != 0L)
                             jjCheckNAddStates(0, 2);
                          break;
                       case 12:
                          if (curChar == 92)
                             jjstateSet[jjnewStateCnt++] = 13;
                          break;
                       case 13:
                          if ((0x14404410000000L & l) != 0L)
                             jjCheckNAddStates(0, 2);
                          break;
                       default : break;
                    }
                 } while(i != startsAt);
              }
              else
              {
                 int i2 = (curChar & 0xff) >> 6;
                 long l2 = 1L << (curChar & /* 077*/ 0x3F);
                 do
                 {
                    switch(jjstateSet[--i])
                    {
                       case 2:
                          if ((jjbitVec0[i2] & l2) == 0L)
                             break;
                          if (kind > 3)
                             kind = 3;
                          jjAddStates(3, 5);
                          break;
                       case 11:
                          if ((jjbitVec0[i2] & l2) != 0L)
                             jjAddStates(0, 2);
                          break;
                       default : break;
                    }
                 } while(i != startsAt);
              }
              if (kind != 0x7fffffff)
              {
                  jjmatchedKind = kind;
                 jjmatchedPos = curPos;
                 kind = 0x7fffffff;
              }
              ++curPos;
              if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
                 return curPos;
              try { curChar = SimpleCharStream.readChar(); }
              catch(IOException e) { return curPos; }
           }
        }
        static private int jjMoveStringLiteralDfa0_1()
        {
           switch((int)curChar)
           {
              case 42:
                 return jjMoveStringLiteralDfa1_1(0x10L);
              default :
                 return 1;
           }
        }
        static private int jjMoveStringLiteralDfa1_1(long active0)
        {
           try { curChar = SimpleCharStream.readChar(); }
           catch(IOException e) {
              return 1;
           }
           switch((int)curChar)
           {
              case 47:
                 if ((active0 & 0x10L) != 0L)
                    return jjStopAtPos(1, 4);
                 break;
              default :
                 return 2;
           }
           return 2;
        }
        
        static readonly int[] jjnextStates = {
           11, 12, 14, 2, 3, 5, 
        };

        /** Token literal values. */

        public static readonly string[] jjstrLiteralImages = {
            null, // 
            null, // 
            null, // 
            null, // 
            null, // 
            "\u0062\u006F\u006F\u006C\u0065\u0061\u006E", // boolean
            "\u0063\u006C\u0061\u0073\u0073", // class
            "\u0065\u006C\u0073\u0065", // else
            "\u0065\u0078\u0074\u0065\u006E\u0064\u0073", // extends
            "\u0066\u0061\u006C\u0073\u0065", // false
            "\u0069\u0066", // if
            "\u0069\u006E\u0074", // int
            "\u006C\u0065\u006E\u0067\u0074\u0068", // length
            "\u006D\u0061\u0069\u006E", // main
            "\u006E\u0065\u0077", // new
            "\u0070\u0075\u0062\u006C\u0069\u0063", // public
            "\u0072\u0065\u0074\u0075\u0072\u006E", // return
            "\u0073\u0074\u0061\u0074\u0069\u0063", // static
            "\u0053\u0074\u0072\u0069\u006E\u0067", // String
            "\u0053\u0079\u0073\u0074\u0065\u006D\u002E\u006F\u0075\u0074\u002E\u0070\u0072\u0069\u006E\u0074\u006C\u006E", // System.out.println
            "\u0074\u0068\u0069\u0073", // this
            "\u0074\u0072\u0075\u0065", // true
            "\u0076\u006F\u0069\u0064", // void
            "\u0077\u0068\u0069\u006C\u0065", // while
            null, // 
            "\u0028", // (
            "\u0029", // )
            "\u005B", // [
            "\u005D", // ]
            "\u007B", // {
            "\u007D", // }
            "\u002C", // , // 
            "\u003D", // =
            "\u003B", // ;
            "\u007C\u007C", // ||
            "\u0026\u0026", // &&
            "\u002B", // +
            "\u002D", // -
            "\u002A", // *
            "\u002F", // /
            "\u002E", // .
            "\u0021", // !
            "\u003D\u003D", // ==
            "\u0021\u003D", // !=
            "\u003C", // <
            "\u003C\u003D", // <=
            "\u003E", // >
            "\u003E\u003D", // >=
            null, // 
            null, // 
            null, // 
            null, //
                                                             };
        #if false
            public static readonly string[] jjstrLiteralImages = {
            "", null, null, null, null, null, "\142\157\157\154\145\141\156", 
            "\143\154\141\163\163", "\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
            "\151\146", "\151\156\164", "\154\145\156\147\164\150", "\155\141\151\156", 
            "\156\145\167", "\160\165\142\154\151\143", "\162\145\164\165\162\156", 
            "\163\164\141\164\151\143", "\123\164\162\151\156\147", 
            "\123\171\163\164\145\155\56\157\165\164\56\160\162\151\156\164\154\156", "\164\150\151\163", "\164\162\165\145", "\166\157\151\144", 
            "\167\150\151\154\145", null, "\50", "\51", "\133", "\135", "\173", "\175", "\54", "\75", "\73", 
            "\174\174", "\46\46", "\53", "\55", "\52", "\57", "\56", "\41", "\75\75", "\41\75", "\74", 
            "\74\75", "\76", "\76\75", null, null, null, null, };
        #endif

        /** Lexer state names. */
        public static readonly string[] lexStateNames =
        {
            "DEFAULT",
            "IN_MULTI_LINE_COMMENT",
        };

        /** Lex State array. */
        public static readonly int[] jjnewLexState = {
            -1, -1, 1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
            -1, -1, -1, 
        };
        static readonly long[] jjtoToken = {
            0x19ffffffffffc1L, 
        };
        static readonly long[] jjtoSkip = {
            0x1aL, 
        };
        static readonly long[] jjtoSpecial = {
            0x18L, 
        };
        static readonly long[] jjtoMore = {
            0x24L, 
        };
        static protected SimpleCharStream input_stream;
        static private readonly int[] jjrounds = new int[15];
        static private readonly int[] jjstateSet = new int[30];
        private static readonly StringBuilder jjimage = new StringBuilder();
        private static StringBuilder image = jjimage;
        private static int jjimageLen;
        private static int lengthOfMatch;
        static protected char curChar;

        /** Constructor. */
        public miniParserTokenManager(SimpleCharStream stream)
        {
            if (input_stream != null)
                throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
            input_stream = stream;
        }

        /** Constructor. */
        public miniParserTokenManager(SimpleCharStream stream, int lexState)
            : this(stream)
        {
            SwitchTo(lexState);
        }

        /** Reinitialise parser. */
        static public void ReInit(SimpleCharStream stream)
        {
            jjmatchedPos = jjnewStateCnt = 0;
            curLexState = defaultLexState;
            input_stream = stream;
            ReInitRounds();
        }

        static private void ReInitRounds()
        {
            int i;
            jjround = unchecked((int)0x80000001);
            for (i = 15; i-- > 0;)
                jjrounds[i] = unchecked((int)0x80000000);
        }

        /** Reinitialise parser. */
        static public void ReInit(SimpleCharStream stream, int lexState)
        {
            ReInit(stream);
            SwitchTo(lexState);
        }

        /** Switch to specified lex state. */
        static public void SwitchTo(int lexState)
        {
           if (lexState >= 2 || lexState < 0)
              throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
           else
              curLexState = lexState;
        }

        static protected PsrToken jjFillToken()
        {
            /* final */
            PsrToken t;
            /* final */ string curTokenImage;
            /* final */ int beginLine;
            /* final */ int endLine;
            /* final */ int beginColumn;
            /* final */ int endColumn;
            string im = jjstrLiteralImages[jjmatchedKind];
            curTokenImage = (im == null) ? SimpleCharStream.GetImage() : im;
            beginLine = SimpleCharStream.getBeginLine();
            beginColumn = SimpleCharStream.getBeginColumn();
            endLine = SimpleCharStream.getEndLine();
            endColumn = SimpleCharStream.getEndColumn();
            t = PsrToken.newToken((MpRegExpId)jjmatchedKind, curTokenImage);

            t.beginLine = beginLine;
            t.endLine = endLine;
            t.beginColumn = beginColumn;
            t.endColumn = endColumn;

            return t;
        }

        static int curLexState = 0;
        static int defaultLexState = 0;
        static int jjnewStateCnt;
        static int jjround;
        static int jjmatchedPos;
        static int jjmatchedKind;

        /** Get the next Token. */
        public static PsrToken getNextToken() 
        {
            PsrToken specialToken = null;
            PsrToken matchedToken;
            int curPos = 0;
            bool skip_to_next_token;

            // EOFLoop :
            for (;;)
            {
                skip_to_next_token = false;

                try
                {
                    curChar = SimpleCharStream.BeginToken();
                }
                catch(IOException e)
                {
                    jjmatchedKind = 0;
                    matchedToken = jjFillToken();
                    matchedToken.specialToken = specialToken;
                    return matchedToken;
                }

                image = jjimage;
                image.Length = 0;
                jjimageLen = 0;

                while(!skip_to_next_token)
                {
                    switch(curLexState)
                    {
                        case 0:
                            jjmatchedKind = 0x7fffffff;
                            jjmatchedPos = 0;
                            curPos = jjMoveStringLiteralDfa0_0();
                            break;

                        case 1:
                            jjmatchedKind = 0x7fffffff;
                            jjmatchedPos = 0;
                            curPos = jjMoveStringLiteralDfa0_1();
                            if (jjmatchedPos == 0 && jjmatchedKind > 5)
                            {
                                jjmatchedKind = 5;
                            }
                            break;
                    }

                    if (jjmatchedKind != 0x7fffffff)
                    {
                        if (jjmatchedPos + 1 < curPos)
                            SimpleCharStream.backup(curPos - jjmatchedPos - 1);

                        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & /* 077*/ 0x3F))) != 0L)
                        {
                            matchedToken = jjFillToken();
                            matchedToken.specialToken = specialToken;
                            TokenLexicalActions(matchedToken);

                            if (jjnewLexState[jjmatchedKind] != -1)
                                curLexState = jjnewLexState[jjmatchedKind];
                            return matchedToken;
                        }
                        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & /* 077*/ 0x3F))) != 0L)
                        {
                            if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & /* 077*/ 0x3F))) != 0L)
                            {
                                matchedToken = jjFillToken();
                                if (specialToken == null)
                                    specialToken = matchedToken;
                                else
                                {
                                    matchedToken.specialToken = specialToken;
                                    specialToken = (specialToken.next = matchedToken);
                                }
                            SkipLexicalActions(matchedToken);
                            }
                            else
                                SkipLexicalActions(null);

                            if (jjnewLexState[(int)jjmatchedKind] != -1)
                                curLexState = jjnewLexState[jjmatchedKind];

                            skip_to_next_token = true;
                            //continue EOFLoop;
                        }

                        if (!skip_to_next_token)
                        {
                            jjimageLen += jjmatchedPos + 1;
                            if (jjnewLexState[jjmatchedKind] != -1)
                                curLexState = jjnewLexState[jjmatchedKind];
                            curPos = 0;
                            jjmatchedKind = 0x7fffffff;
                            try
                            {
                                curChar = SimpleCharStream.readChar();
                                continue;
                            }
                            catch (IOException e1)
                            {
                            }
                        }
                    }

                    if (!skip_to_next_token)
                    {
                        int error_line = SimpleCharStream.getEndLine();
                        int error_column = SimpleCharStream.getEndColumn();
                        string error_after = null;
                        bool EOFSeen = false;

                        try
                        {
                            SimpleCharStream.readChar();
                            SimpleCharStream.backup(1);
                        }
                        catch (IOException e1)
                        {
                            EOFSeen = true;
                            error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
                            if (curChar == '\n' || curChar == '\r')
                            {
                                error_line++;
                                error_column = 0;
                            }
                            else
                                error_column++;
                        }

                        if (!EOFSeen)
                        {
                            SimpleCharStream.backup(1);
                            error_after = curPos <= 1 ? "" : SimpleCharStream.GetImage();
                        }

                        throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
                    }
                }
            } // EOFLoop
        }

        static void SkipLexicalActions(Token matchedToken)
        {
            switch(jjmatchedKind)
            {
                default :
                    break;
            }
        }

        static void TokenLexicalActions(Token matchedToken)
        {
            switch(jjmatchedKind)
            {
                case 25 :

                    image.Append(SimpleCharStream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    if (matchedToken.image.Length > 255)
                    {
                        throw new TokenMgrError("Lexical error at line "
                            + matchedToken.beginLine + ", column "
                            + matchedToken.beginColumn + ".  Id length over 255", 0);
                    }
                    break;

                case 51 :

                    image.Append(SimpleCharStream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    try
                    {
                        int.Parse(matchedToken.image);
                    }
                    catch (Exception e)
                    {
                        throw new TokenMgrError("Lexical error at line "
                            + matchedToken.beginLine + ", column " + matchedToken.beginColumn +
                            ".  Integer value over 2^31-1", 0);
                    }
                    break;

                case 52 :

                    image.Append(SimpleCharStream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                    if (matchedToken.image.Length > 257)
                    {
                        throw new TokenMgrError("Lexical error at line "
                            + matchedToken.beginLine + ", column "
                            + matchedToken.beginColumn + ".  String length over 255", 0);
                    }
                    break;

                default :
                    break;
                }
        }

        static private void jjCheckNAdd(int state)
        {
            if (jjrounds[state] != jjround)
            {
                jjstateSet[jjnewStateCnt++] = state;
                jjrounds[state] = jjround;
            }
        }

        static private void jjAddStates(int start, int end)
        {
            do
            {
                jjstateSet[jjnewStateCnt++] = jjnextStates[start];
            } while (start++ != end);
        }

        static private void jjCheckNAddTwoStates(int state1, int state2)
        {
            jjCheckNAdd(state1);
            jjCheckNAdd(state2);
        }

        static private void jjCheckNAddStates(int start, int end)
        {
            do
            {
                jjCheckNAdd(jjnextStates[start]);
            } while (start++ != end);
        }
    }
}