// **********************************************************************************
// * Copyright (c) 2013 Robin Murray
// **********************************************************************************
// *
// * File: astParserConstants.cs
// *
// * Description: Token constants for abstract syntax tree.
// *
// *
// *
// **********************************************************************************
// *
// * Granting License: The MIT License (MIT)
// * 
// *   Permission is hereby granted, free of charge, to any person obtaining a copy
// *   of this software and associated documentation files (the "Software"), to deal
// *   in the Software without restriction, including without limitation the rights
// *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// *   copies of the Software, and to permit persons to whom the Software is
// *   furnished to do so, subject to the following conditions:
// *   The above copyright notice and this permission notice shall be included in
// *   all copies or substantial portions of the Software.
// *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// *   THE SOFTWARE.
// * 
// **********************************************************************************

/* Generated By:JavaCC: Do not edit this line. miniParserConstants.java */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DemiTasse.minipsr
{
    /**
     * Token literal values and constants.
     * Generated by org.javacc.parser.OtherFilesGen#start()
     */
    public class miniParserConstants
    {
        public enum MpRegExpId
        {
            /** End of File. */
            UNDEFINED = -1,
            /** End of File. */
            EOF = 0,
            /** RegularExpression Id. */
            SPACE = 1,
            /** RegularExpression Id. */
            SINGLE_LINE_COMMENT = 3,
            /** RegularExpression Id. */
            MULTI_LINE_COMMENT = 4,
            /** RegularExpression Id. */
            BOOLEAN = 6,
            /** RegularExpression Id. */
            CLASS = 7,
            /** RegularExpression Id. */
            ELSE = 8,
            /** RegularExpression Id. */
            EXTENDS = 9,
            /** RegularExpression Id. */
            FALSE = 10,
            /** RegularExpression Id. */
            IF = 11,
            /** RegularExpression Id. */
            INT = 12,
            /** RegularExpression Id. */
            LENGTH = 13,
            /** RegularExpression Id. */
            MAIN = 14,
            /** RegularExpression Id. */
            NEW = 15,
            /** RegularExpression Id. */
            PUBLIC = 16,
            /** RegularExpression Id. */
            RETURN = 17,
            /** RegularExpression Id. */
            STATIC = 18,
            /** RegularExpression Id. */
            STRING = 19,
            /** RegularExpression Id. */
            SYSTEM_OUT_PRINTLN = 20,
            /** RegularExpression Id. */
            THIS = 21,
            /** RegularExpression Id. */
            TRUE = 22,
            /** RegularExpression Id. */
            VOID = 23,
            /** RegularExpression Id. */
            WHILE = 24,
            /** RegularExpression Id. */
            ID = 25,
            /** RegularExpression Id. */
            LPAREN = 26,
            /** RegularExpression Id. */
            RPAREN = 27,
            /** RegularExpression Id. */
            LBRACKET = 28,
            /** RegularExpression Id. */
            RBRACKET = 29,
            /** RegularExpression Id. */
            LBRACE = 30,
            /** RegularExpression Id. */
            RBRACE = 31,
            /** RegularExpression Id. */
            COMMA = 32,
            /** RegularExpression Id. */
            ASSIGN = 33,
            /** RegularExpression Id. */
            SEMICOLON = 34,
            /** RegularExpression Id. */
            OR = 35,
            /** RegularExpression Id. */
            AND = 36,
            /** RegularExpression Id. */
            ADD = 37,
            /** RegularExpression Id. */
            SUB = 38,
            /** RegularExpression Id. */
            MUL = 39,
            /** RegularExpression Id. */
            DIV = 40,
            /** RegularExpression Id. */
            DOT = 41,
            /** RegularExpression Id. */
            NOT = 42,
            /** RegularExpression Id. */
            EQ = 43,
            /** RegularExpression Id. */
            NE = 44,
            /** RegularExpression Id. */
            LT = 45,
            /** RegularExpression Id. */
            LE = 46,
            /** RegularExpression Id. */
            GT = 47,
            /** RegularExpression Id. */
            GE = 48,
            /** RegularExpression Id. */
            DIGIT = 49,
            /** RegularExpression Id. */
            LETTER = 50,
            /** RegularExpression Id. */
            INTVAL = 51,
            /** RegularExpression Id. */
            STRVAL = 52,
        }

        /** Lexical state. */
        int DEFAULT = 0;
        /** Lexical state. */
        int IN_MULTI_LINE_COMMENT = 1;

        /** Literal token values. */
        public static string[] tokenImage =
        {
            "<EOF>",
            "<SPACE>",
            "\"/*\"",
            "<SINGLE_LINE_COMMENT>",
            "\"*/\"",
            "<token of kind 5>",
            "\"boolean\"",
            "\"class\"",
            "\"else\"",
            "\"extends\"",
            "\"false\"",
            "\"if\"",
            "\"int\"",
            "\"length\"",
            "\"main\"",
            "\"new\"",
            "\"public\"",
            "\"return\"",
            "\"static\"",
            "\"String\"",
            "\"System.out.println\"",
            "\"this\"",
            "\"true\"",
            "\"void\"",
            "\"while\"",
            "<ID>",
            "\"(\"",
            "\")\"",
            "\"[\"",
            "\"]\"",
            "\"{\"",
            "\"}\"",
            "\",\"",
            "\"=\"",
            "\";\"",
            "\"||\"",
            "\"&&\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\".\"",
            "\"!\"",
            "\"==\"",
            "\"!=\"",
            "\"<\"",
            "\"<=\"",
            "\">\"",
            "\">=\"",
            "<DIGIT>",
            "<LETTER>",
            "<INTVAL>",
            "<STRVAL>",
        };
    }
}