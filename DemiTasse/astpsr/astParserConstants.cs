// **********************************************************************************
// * Copyright (c) 2013 Robin Murray
// **********************************************************************************
// *
// * File: astParserConstants.cs
// *
// * Description: Token constants for abstract syntax tree.
// *
// *
// *
// **********************************************************************************
// *
// * Granting License: The MIT License (MIT)
// * 
// *   Permission is hereby granted, free of charge, to any person obtaining a copy
// *   of this software and associated documentation files (the "Software"), to deal
// *   in the Software without restriction, including without limitation the rights
// *   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// *   copies of the Software, and to permit persons to whom the Software is
// *   furnished to do so, subject to the following conditions:
// *   The above copyright notice and this permission notice shall be included in
// *   all copies or substantial portions of the Software.
// *   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// *   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// *   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// *   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// *   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// *   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// *   THE SOFTWARE.
// * 
// **********************************************************************************

/* Generated By:JavaCC: Do not edit this line. astParserConstants.java */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace DemiTasse.astpsr
{
    /**
     * Token literal values and constants.
     * Generated by org.javacc.parser.OtherFilesGen#start()
     */
    public class astParserConstants
    {
        /** End of File. */
        public static readonly int EOF = 0;

        public enum AstRegExpId 
        {
            /** RegularExpression Id. */
            UNDEFINED = -1,
            /** RegularExpression Id. */
            kwArrayElm = 6,
            /** RegularExpression Id. */
            kwArrayLen = 7,
            /** RegularExpression Id. */
            kwArrayType = 8,
            /** RegularExpression Id. */
            kwAssign = 9,
            /** RegularExpression Id. */
            kwBasicType = 10,
            /** RegularExpression Id. */
            kwBinop = 11,
            /** RegularExpression Id. */
            kwBlock = 12,
            /** RegularExpression Id. */
            kwBool = 13,
            /** RegularExpression Id. */
            kwBoolVal = 14,
            /** RegularExpression Id. */
            kwCall = 15,
            /** RegularExpression Id. */
            kwCallStmt = 16,
            /** RegularExpression Id. */
            kwClassDecl = 17,
            /** RegularExpression Id. */
            kwClassDeclList = 18,
            /** RegularExpression Id. */
            kwExp = 19,
            /** RegularExpression Id. */
            kwExpList = 20,
            /** RegularExpression Id. */
            kwFalse = 21,
            /** RegularExpression Id. */
            kwField = 22,
            /** RegularExpression Id. */
            kwFormal = 23,
            /** RegularExpression Id. */
            kwFormalList = 24,
            /** RegularExpression Id. */
            kwId = 25,
            /** RegularExpression Id. */
            kwIf = 26,
            /** RegularExpression Id. */
            kwInt = 27,
            /** RegularExpression Id. */
            kwIntVal = 28,
            /** RegularExpression Id. */
            kwMethodDecl = 29,
            /** RegularExpression Id. */
            kwMethodDeclList = 30,
            /** RegularExpression Id. */
            kwNewArray = 31,
            /** RegularExpression Id. */
            kwNewObj = 32,
            /** RegularExpression Id. */
            kwObjType = 33,
            /** RegularExpression Id. */
            kwPrint = 34,
            /** RegularExpression Id. */
            kwProgram = 35,
            /** RegularExpression Id. */
            kwRelop = 36,
            /** RegularExpression Id. */
            kwReturn = 37,
            /** RegularExpression Id. */
            kwStmt = 38,
            /** RegularExpression Id. */
            kwStmtList = 39,
            /** RegularExpression Id. */
            kwStrVal = 40,
            /** RegularExpression Id. */
            kwThis = 41,
            /** RegularExpression Id. */
            kwTrue = 42,
            /** RegularExpression Id. */
            kwType = 43,
            /** RegularExpression Id. */
            kwUnop = 44,
            /** RegularExpression Id. */
            kwVarDecl = 45,
            /** RegularExpression Id. */
            kwVarDeclList = 46,
            /** RegularExpression Id. */
            kwWhile = 47,
            /** RegularExpression Id. */
            kwNullType = 48,
            /** RegularExpression Id. */
            kwNullStmt = 49,
            /** RegularExpression Id. */
            kwNullExp = 50,
            /** RegularExpression Id. */
            DIGIT = 51,
            /** RegularExpression Id. */
            LETTER = 52,
            /** RegularExpression Id. */
            INTVAL = 53,
            /** RegularExpression Id. */
            STRVAL = 54,
            /** RegularExpression Id. */
            ID = 55,

            kw56 = 56,
            kw57 = 57,
            kw58 = 58,
            kw59 = 59,
            kw60 = 60,
            kw61 = 61,
            kw62 = 62,
            kw63 = 63,
            kw64 = 64,
            kw65 = 65,
            kw66 = 66,
            kw67 = 67,
            kw68 = 68,
            kw69 = 69,
            kw70 = 70,
        }

        /** Lexical state. */
        public static int DEFAULT = 0;

        /** Literal token values. */
        public static string[] tokenImage = 
        {
            "<EOF>",
            "\" \"",
            "\"\\t\"",
            "\"\\n\"",
            "\"\\r\"",
            "\"\\f\"",
            "\"ArrayElm\"",
            "\"ArrayLen\"",
            "\"ArrayType\"",
            "\"Assign\"",
            "\"BasicType\"",
            "\"Binop\"",
            "\"Block\"",
            "\"boolean\"",
            "\"BoolVal\"",
            "\"Call\"",
            "\"CallStmt\"",
            "\"ClassDecl\"",
            "\"ClassDeclList\"",
            "\"Exp\"",
            "\"ExpList\"",
            "\"false\"",
            "\"Field\"",
            "\"Formal\"",
            "\"FormalList\"",
            "\"Id\"",
            "\"If\"",
            "\"int\"",
            "\"IntVal\"",
            "\"MethodDecl\"",
            "\"MethodDeclList\"",
            "\"NewArray\"",
            "\"NewObj\"",
            "\"ObjType\"",
            "\"Print\"",
            "\"Program\"",
            "\"Relop\"",
            "\"Return\"",
            "\"Stmt\"",
            "\"StmtList\"",
            "\"StrVal\"",
            "\"This\"",
            "\"true\"",
            "\"Type\"",
            "\"Unop\"",
            "\"VarDecl\"",
            "\"VarDeclList\"",
            "\"While\"",
            "\"NullType\"",
            "\"NullStmt\"",
            "\"NullExp\"",
            "<DIGIT>",
            "<LETTER>",
            "<INTVAL>",
            "<STRVAL>",
            "<ID>",
            "\"(\"",
            "\")\"",
            "\"+\"",
            "\"-\"",
            "\"*\"",
            "\"/\"",
            "\"&&\"",
            "\"||\"",
            "\"==\"",
            "\"!=\"",
            "\"<\"",
            "\"<=\"",
            "\">\"",
            "\">=\"",
            "\"!\"",
        };
    }
}